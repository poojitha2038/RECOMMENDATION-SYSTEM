Install libraries if needed:
!pip install pandas numpy scikit-learn matplotlib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import cosine_similarity

#1. Load dataset
Download: https://files.grouplens.org/datasets/movielens/ml-latest-small.zip
Extract and place "ratings.csv" & "movies.csv" in your project folder
ratings = pd.read_csv("ml-latest-small/ratings.csv")
movies = pd.read_csv("ml-latest-small/movies.csv")
print("Dataset Loaded Successfully!")
print("Ratings shape:", ratings.shape)
print(ratings.head())

#2. Data exploration
print("\nNumber of unique users:", ratings['userId'].nunique())
print("Number of unique movies:", ratings['movieId'].nunique())
print("Average rating:", round(ratings['rating'].mean(), 2))

#Ratings distribution
plt.figure(figsize=(8,5))
ratings['rating'].hist(bins=20, edgecolor='black')
plt.title("Ratings Distribution")
plt.xlabel("Rating")
plt.ylabel("Frequency")
plt.grid(axis='y')
plt.show()

#3. Create User-Item Matrix
user_item_matrix = ratings.pivot_table(index='userId', columns='movieId', values='rating')
print("\nUser-Item Matrix created:", user_item_matrix.shape)
# Fill NaN with 0 for similarity computation
user_item_filled = user_item_matrix.fillna(0)

# 4. Compute Similarity
# User-User Similarity
user_similarity = cosine_similarity(user_item_filled)
user_similarity_df = pd.DataFrame(user_similarity, 
                                  index=user_item_matrix.index, 
                                  columns=user_item_matrix.index)

print("\nUser Similarity Matrix created!")

# 5. Recommendation Function
def recommend_movies(user_id, num_recommendations=5):
    # Get similarity scores for this user
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)
    
    # Take top similar user (excluding self)
    top_user = similar_users.index[1]
    
    # Get movies rated by top_user but not current user
    user_ratings = user_item_matrix.loc[user_id]
    top_user_ratings = user_item_matrix.loc[top_user]
    
    # Filter out movies already rated by target user
    recommendations = top_user_ratings[user_ratings.isna() & top_user_ratings.notna()]
    
    # Sort recommendations
    recommendations = recommendations.sort_values(ascending=False).head(num_recommendations)
    
    # Map movieId to titles
    recommendations = pd.DataFrame(recommendations).reset_index()
    recommendations = recommendations.merge(movies[['movieId', 'title']], on='movieId')
    
    return recommendations[['movieId', 'title', top_user]]

# 6. Test Recommendation
user_id = 1
top_recs = recommend_movies(user_id, num_recommendations=10)
print(f"\nTop Recommendations for User {user_id}:")
print(top_recs)

# 7. Save Output
top_recs.to_csv("recommendations_user1.csv", index=False)
print("\nRecommendations saved to recommendations_user1.csv")
